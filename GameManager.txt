// dnSpy decompiler from Assembly-CSharp.dll
using System;
using System.Collections.Generic;
using PlayFab;
using PlayFab.ClientModels;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

[Serializable]
public class GameManager : MonoBehaviour
{
	private void Awake()
	{
		GameManager.Instance = this;
	}

	private void Start()
	{
	}

	private void OnApplicationQuit()
	{
		DataManager.Instance.saveData(true);
	}

	private void OnApplicationPause(bool pauseStatus)
	{
		if (LoginManager.Instance.isConnectedPlayfab && Application.platform != RuntimePlatform.WebGLPlayer)
		{
			if (pauseStatus)
			{
				this.lastPlayTime = Convert.ToString(this.currServerTime);
			}
			else if (this.isLoaded)
			{
				this.checkServerStuff();
			}
		}
	}

	public string saveData()
	{
		if (LoginManager.Instance.isConnectedPlayfab)
		{
			DateTime t = DateTime.Now.AddDays(-5.0);
			if (this.currServerTime > t)
			{
				this.lastPlayTime = Convert.ToString(this.currServerTime);
			}
		}
		this.hasV3 = true;
		this.hasV4 = true;
		this.hasV115 = true;
		return JsonUtility.ToJson(this);
	}

	public void loadData()
	{
		string gameManagerData = DataManager.Instance.GameManagerData;
		if (gameManagerData != string.Empty)
		{
			JsonUtility.FromJsonOverwrite(gameManagerData, this);
		}
		if (this.currMissionDate == string.Empty)
		{
			this.setNewDailyMissions();
		}
		if (this.lastRewardCodeDate == string.Empty)
		{
			this.lastRewardCodeDate = "2017/01/01";
		}
		if (this.lastGiveExtraCodeDate == string.Empty)
		{
			this.lastGiveExtraCodeDate = "2017/01/01";
		}
		this.activeHeroes.Clear();
		this.numAliveHeroes = 0;
		this.selectedHero = null;
		this.isGameOver = false;
		this.prestigePause = false;
		this.isLoaded = true;
		if (this.statPrestiges > 0)
		{
			this.showedPrestigeTut = true;
		}
		this.checkServerStuff();
		if (!this.hasV3)
		{
			this.onMapNum = 0;
		}
		for (int i = 0; i < UIManager.Instance.listMaps.Count; i++)
		{
			GameObject gameObject = UIManager.Instance.listMaps[i];
			if (i == this.onMapNum)
			{
				gameObject.SetActive(true);
			}
			else
			{
				gameObject.SetActive(false);
			}
		}
		if (this.doneTutorial)
		{
			EnemyManager.Instance.needNewWave = true;
		}
		else
		{
			UIManager.Instance.onTutNum = 0;
			UIManager.Instance.tutMute = false;
			UIManager.Instance.doTutorialScreensV2();
		}
		if (this.doneTutorial && !this.hasV115)
		{
			UIManager.Instance.newUpdatePanel.SetActive(true);
		}
		if (GameManager.Instance.showDiscordPanel && !UIManager.Instance.newUpdatePanel.activeSelf && !UIManager.Instance.rateMePanel.activeSelf && !UIManager.Instance.iapSaleMessage.activeSelf && GameManager.Instance.statHighestWave > 25)
		{
			UIManager.Instance.discordPanel.SetActive(true);
		}
		if (LoginManager.Instance.isConnectedPlayfab)
		{
			if (Application.platform == RuntimePlatform.WebGLPlayer)
			{
				DataManager.Instance.updatePlayfabDisplayName(LoginManager.Instance.KongregateUsername);
			}
			else
			{
				DataManager.Instance.updatePlayfabDisplayName(this.commName);
			}
			DataManager.Instance.updatePlayfabAvatarUrl(this.commIcon.ToString());
		}
	}

	public void updateLeaderboardsData()
	{
		if (this.isBanned)
		{
			return;
		}
		UnityEngine.Debug.Log("updating leaderboards");
		PlayFabClientAPI.UpdatePlayerStatistics(new UpdatePlayerStatisticsRequest
		{
			Statistics = new List<StatisticUpdate>
			{
				new StatisticUpdate
				{
					StatisticName = "Highest Wave",
					Value = this.leadHighestWave
				},
				new StatisticUpdate
				{
					StatisticName = "Commander Level",
					Value = this.commLevel
				},
				new StatisticUpdate
				{
					StatisticName = "Total Waves",
					Value = this.leadTotalWaves
				},
				new StatisticUpdate
				{
					StatisticName = "Total Prestiges",
					Value = this.leadPrestiges
				},
				new StatisticUpdate
				{
					StatisticName = "Enemies Killed",
					Value = this.leadEnemiesKilled
				},
				new StatisticUpdate
				{
					StatisticName = "Ads Watched",
					Value = this.statAdsWatched
				},
				new StatisticUpdate
				{
					StatisticName = "Money Spent",
					Value = this.statMoneySpent
				},
				new StatisticUpdate
				{
					StatisticName = "Money Spent Daily",
					Value = this.leadMoneySpent
				}
			}
		}, delegate(UpdatePlayerStatisticsResult result)
		{
			UnityEngine.Debug.Log("successfully updated leaderboards");
			this.leadTotalWaves = 0;
			this.leadTotalScore = 0;
			this.leadPrestiges = 0;
			this.leadEnemiesKilled = 0;
			this.leadMoneySpent = 0;
		}, delegate(PlayFabError error)
		{
			UnityEngine.Debug.Log("failed to update leaderboards");
		}, null, null);
	}

	public void allHeroesDied()
	{
		this.scaleDeathAmt = 1f;
		UIManager.Instance.deathImage.transform.localScale = new Vector3(this.scaleDeathAmt, this.scaleDeathAmt, this.scaleDeathAmt);
		if (this.enemyWaveNum <= 15)
		{
			UIManager.Instance.deathUpgradeText.SetActive(true);
		}
		else
		{
			UIManager.Instance.deathUpgradeText.SetActive(false);
		}
		UIManager.Instance.deathImage.gameObject.SetActive(true);
		UIManager.Instance.deathBlackBg.SetActive(true);
		this.isScalingDeathIcon = true;
		this.isGameOver = true;
		SoundManager.Instance.playEvilLaugh();
		if (GameManager.Instance.m3Num == 3 && !TheUnderground.Instance.playingMiniGame && !PirateRaid.Instance.playingMiniGame)
		{
			GameManager.Instance.m3CurrVal = 0;
			GameManager.Instance.checkMissionStatus();
		}
	}

	public void reviveActiveHeroes(float reviveAmt)
	{
		for (int i = 0; i < this.activeHeroes.Count; i++)
		{
			Hero hero = this.activeHeroes[i];
			if (hero.currHp <= 0.0)
			{
				double num = hero.getActMaxHp(hero.baseDps) * (double)reviveAmt;
				num = Math.Round(num, 0);
				hero.currHp = num;
				hero.playIdleAnim();
				if (this.settingsParticleEffects)
				{
					GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(UIManager.Instance.particlesRevive);
					gameObject.transform.position = hero.transform.position;
					gameObject.transform.SetParent(UIManager.Instance.particlesParent.transform);
					UnityEngine.Object.Destroy(gameObject, 1f);
				}
			}
		}
		for (int j = 0; j < UIManager.Instance.heroBarsParent.transform.childCount; j++)
		{
			UIManager.Instance.heroBarsParent.transform.GetChild(j).gameObject.SetActive(true);
		}
		this.numAliveHeroes = this.activeHeroes.Count;
	}

	public void healHeroesNewWave()
	{
		this.reviveActiveHeroes(1f);
		for (int i = 0; i < HeroManager.Instance.heroList.Count; i++)
		{
			Hero hero = HeroManager.Instance.heroList[i];
			if (hero.isActiveHero && hero.currHp > 0.0 && this.settingsParticleEffects)
			{
				GameObject poolObject = UIManager.Instance.getPoolObject(UIManager.Instance.poolHealParticles);
				if (poolObject != null)
				{
					poolObject.transform.position = hero.transform.position;
					ParticleSystem component = poolObject.GetComponent<ParticleSystem>();
					poolObject.SetActive(true);
					component.Play();
				}
			}
			hero.currHp = hero.getActMaxHp(hero.baseDps);
		}
	}

	public void restartWave()
	{
		this.alreadyPlayedWave = true;
		this.isGameOver = false;
		SoundManager.Instance.playSpawn();
		for (int i = 0; i < EnemyManager.Instance.enemyList.Count; i++)
		{
			Enemy enemy = EnemyManager.Instance.enemyList[i];
			UnityEngine.Object.Destroy(enemy.gameObject);
		}
		EnemyManager.Instance.enemyList.Clear();
		this.healHeroesNewWave();
		this.isScalingDeathIcon = false;
		UIManager.Instance.deathBlackBg.SetActive(false);
		EnemyManager.Instance.needNewWave = true;
	}

	public void doNextWave()
	{
		SoundManager.Instance.playSpawn();
		if (GameManager.Instance.m4Num == 5 && this.activeHeroes.Count == 1)
		{
			GameManager.Instance.m4CurrVal++;
			GameManager.Instance.checkMissionStatus();
		}
		if (this.tournamentActive && this.tournamentOnType == 1)
		{
			int num = 200000 * this.enemyWaveNum + (86400 - this.statCurrPrestigeTime);
			if (num > this.tournamentScore)
			{
				this.tournamentScore = num;
			}
		}
		this.leadHighestWave = this.enemyWaveNum;
		if (this.enemyWaveNum == 4500)
		{
			this.statHighestWave = 4500;
			if (this.m5Num == 1)
			{
				this.m5CurrVal = 4500;
				this.checkMissionStatus();
			}
			AchievementManager.Instance.listAch[3].currAmt = 4500.0;
			AchievementManager.Instance.checkIfAchComplete(3);
			this.restartWave();
			return;
		}
		int num2 = this.enemyWaveNum / 100;
		if (num2 < 1)
		{
			num2 = 1;
		}
		num2 *= num2;
		this.statTotalScore += num2;
		this.leadTotalScore += num2;
		this.statTotalWaves++;
		this.leadTotalWaves++;
		if (this.tournamentActive && this.tournamentOnType == 2)
		{
			this.tournamentScore++;
		}
		int num3 = 1 + this.badge5Lvl;
		if (this.enemyWaveNum > this.statHighestWave)
		{
			this.statHighestWave = this.enemyWaveNum;
			AchievementManager.Instance.listAch[3].currAmt = (double)this.enemyWaveNum;
			AchievementManager.Instance.checkIfAchComplete(3);
			num3 *= 3;
		}
		if (HeroManager.Instance.hero31.isActiveHero)
		{
			num3 *= 2;
		}
		this.addNewCommExp(num3);
		if (!UIManager.Instance.menu.activeSelf && this.settingsCombatTexts)
		{
			GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(UIManager.Instance.commExpTextPrefab);
			gameObject.GetComponent<Text>().text = "+" + num3 + " exp";
			gameObject.transform.SetParent(UIManager.Instance.dmgTextParent.transform, false);
			gameObject.GetComponent<RectTransform>().anchoredPosition = new Vector2(60f, -65f);
		}
		if (GameManager.Instance.m5Num == 1 && this.enemyWaveNum > this.m5CurrVal)
		{
			GameManager.Instance.m5CurrVal = this.enemyWaveNum;
			GameManager.Instance.checkMissionStatus();
		}
		if (GameManager.Instance.m5Num == 4 && GameManager.Instance.m5CurrVal < GameManager.Instance.m5NeedVal)
		{
			GameManager.Instance.m5CurrVal++;
			GameManager.Instance.checkMissionStatus();
		}
		if (GameManager.Instance.q1Num == 1 && GameManager.Instance.q1CurrVal < GameManager.Instance.q1NeedVal)
		{
			GameManager.Instance.q1CurrVal++;
			GameManager.Instance.checkQuestStatus();
		}
		if (GameManager.Instance.q1Num == 2)
		{
			GameManager.Instance.q1CurrVal++;
			GameManager.Instance.checkQuestStatus();
		}
		if (GameManager.Instance.m1Num == 3)
		{
			bool flag = false;
			for (int i = 0; i < this.activeHeroes.Count; i++)
			{
				if (this.activeHeroes[i].type == 1)
				{
					flag = true;
				}
			}
			if (!flag)
			{
				GameManager.Instance.m1CurrVal++;
				GameManager.Instance.checkMissionStatus();
			}
		}
		if (GameManager.Instance.m3Num == 3)
		{
			GameManager.Instance.m3CurrVal++;
			GameManager.Instance.checkMissionStatus();
		}
		if (GameManager.Instance.m3Num == 0)
		{
			GameManager.Instance.m3CurrVal = this.enemyWaveNum;
			GameManager.Instance.checkMissionStatus();
		}
		this.alreadyPlayedWave = false;
		if (this.enemyWaveNum % 5 == 0)
		{
			AcademiaManager.Instance.getNewAcademiaPages(this.enemyWaveNum);
		}
		this.enemyWaveNum++;
		TheUnderground.Instance.checkIfCanPlay();
		PirateRaid.Instance.checkIfCanPlay();
		float num4;
		float num5;
		if (this.enemyWaveNum > 3000)
		{
			num4 = 1.155f;
			num5 = 1.095f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.7f;
			}
		}
		else if (this.enemyWaveNum > 2000)
		{
			num4 = 1.155f;
			num5 = 1.105f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.7f;
			}
		}
		else if (this.enemyWaveNum > 1000)
		{
			num4 = 1.14f;
			num5 = 1.11f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.65f;
			}
		}
		else if (this.enemyWaveNum > 500)
		{
			num4 = 1.145f;
			num5 = 1.115f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.675f;
			}
		}
		else if (this.enemyWaveNum > 200)
		{
			num4 = 1.15f;
			num5 = 1.1175f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.7f;
			}
		}
		else if (this.enemyWaveNum > 50)
		{
			num4 = 1.155f;
			num5 = 1.12f;
			if (this.enemyWaveNum % 25 == 0)
			{
				num4 = 1.725f;
			}
		}
		else
		{
			num4 = 1.16f;
			num5 = 1.12f;
			if (this.enemyWaveNum % 50 == 0)
			{
				num4 = 1.75f;
			}
		}
		double num6 = this.enemyBaseDps;
		this.enemyBaseDps *= (double)num4;
		this.enemyBaseDps = Math.Round(this.enemyBaseDps, 0);
		if (num6 == this.enemyBaseDps)
		{
			this.enemyBaseDps += 1.0;
		}
		double num7 = this.enemyBaseGold;
		this.enemyBaseGold *= (double)num5;
		this.enemyBaseGold = Math.Round(this.enemyBaseGold, 0);
		if (num7 == this.enemyBaseGold)
		{
			this.enemyBaseGold += 1.0;
		}
		this.healHeroesNewWave();
		EnemyManager.Instance.needNewWave = true;
		if (this.enemyWaveNum == 51 && !this.showedPrestigeTut)
		{
			UIManager.Instance.openPrestigeTutPanel();
			this.showedPrestigeTut = true;
		}
		DataManager.Instance.saveData(false);
	}

	public double getActEnemyDps(bool isBoss)
	{
		float num = 1f;
		if (isBoss)
		{
			int num2 = this.enemyWaveNum % 5;
			if (num2 == 1)
			{
				num = 5f;
			}
			else if (num2 == 2)
			{
				num = 7f;
			}
			else if (num2 == 3)
			{
				num = 10f;
			}
			else if (num2 == 4)
			{
				num = 12f;
			}
			else if (num2 == 0)
			{
				num = 15f;
			}
		}
		float num3 = 1f - (float)GameManager.Instance.tech6Lvl * 0.02f;
		double num4 = this.enemyBaseDps * (double)num * (double)num3;
		num4 = Math.Round(num4, 0);
		if (num4 <= 0.0)
		{
			num4 = 1.0;
		}
		if (double.IsInfinity(num4) || double.IsNaN(num4))
		{
			num4 = 1.5E+308;
		}
		return num4;
	}

	public double getActEnemyHp(bool isBoss)
	{
		float num = 1f;
		if (isBoss)
		{
			int num2 = this.enemyWaveNum % 5;
			if (num2 == 1)
			{
				num = 5f;
			}
			else if (num2 == 2)
			{
				num = 7f;
			}
			else if (num2 == 3)
			{
				num = 10f;
			}
			else if (num2 == 4)
			{
				num = 12f;
			}
			else if (num2 == 0)
			{
				num = 15f;
			}
		}
		float num3 = 1f - (float)GameManager.Instance.tech7Lvl * 0.02f;
		double num4 = this.enemyBaseDps * 12.0 * (double)num * (double)num3;
		num4 = Math.Round(num4, 0);
		if (num4 <= 5.0)
		{
			num4 = 5.0;
		}
		if (double.IsInfinity(num4) || double.IsNaN(num4))
		{
			num4 = 1.5E+308;
		}
		return num4;
	}

	public double getActGoldDrop(bool isBoss, bool bypassSkills)
	{
		float num = 1f;
		if (isBoss)
		{
			int num2 = this.enemyWaveNum % 5;
			if (num2 == 1)
			{
				num = 5f;
			}
			else if (num2 == 2)
			{
				num = 7f;
			}
			else if (num2 == 3)
			{
				num = 10f;
			}
			else if (num2 == 4)
			{
				num = 12f;
			}
			else if (num2 == 0)
			{
				num = 15f;
			}
		}
		float num3 = 1f + (float)GameManager.Instance.commBonus * 0.01f;
		num3 *= 1f + (float)GameManager.Instance.badge6Lvl * 0.25f;
		float num4 = 1f;
		if (GameManager.Instance.commIcon == 3)
		{
			num4 = 1.25f;
		}
		else if (GameManager.Instance.commIcon == 8)
		{
			num4 = 5f;
		}
		else if (GameManager.Instance.commIcon == 15)
		{
			num4 = 30f;
		}
		else if (GameManager.Instance.commIcon == 18)
		{
			num4 = 40f;
		}
		else if (GameManager.Instance.commIcon == 21)
		{
			num4 = 150f;
		}
		float num5 = 1f + (float)GameManager.Instance.tournArtLvl4 * 10f;
		double num6 = GameManager.Instance.tournArtCollectionsBonus;
		if (num6 < 1.0)
		{
			num6 = 1.0;
		}
		float num7 = 1f;
		float num8 = 1f;
		for (int i = 0; i < this.activeHeroes.Count; i++)
		{
			Hero hero = this.activeHeroes[i];
			if (hero.type == 2)
			{
				num7 += (float)hero.necklacePower * 0.2f;
			}
			num8 += hero.getReforgeBoosts(5);
		}
		float num9 = 1f + (float)GameManager.Instance.treeAll3Lvl * 0.25f;
		float num10 = 1f + (float)GameManager.Instance.auraGoldLvl * 0.05f;
		float num11 = 1f + (float)GameManager.Instance.artifact2Lvl * 0.05f;
		float num12 = 1f + (float)GameManager.Instance.tech16Lvl * 0.25f;
		if (isBoss)
		{
			num12 += (float)GameManager.Instance.tech19Lvl * 0.1f;
		}
		float num13 = 1f + (float)GameManager.Instance.badge7Lvl * 2.5f;
		float num14 = 1f + (float)AcademiaManager.Instance.listAcademia[3].totalBonus * 0.01f;
		float num15 = 1f + (float)this.videoAdBoost * 0.25f;
		float num16 = 1f;
		if (GameManager.Instance.iapTournBoost && GameManager.Instance.tournamentActive)
		{
			num16 = 5f;
		}
		float num17 = 1f;
		if (!bypassSkills)
		{
			if (HeroManager.Instance.hero2.activeSkill1ActiveTimer > 0f)
			{
				num17 += 2f;
			}
			if (HeroManager.Instance.hero6.isActiveHero)
			{
				num17 += 0.05f;
			}
			if (HeroManager.Instance.hero16.activeSkill1ActiveTimer > 0f)
			{
				num17 += 3f;
			}
			if (HeroManager.Instance.hero19.isActiveHero)
			{
				num17 += 0.1f;
			}
			if (HeroManager.Instance.hero34.activeSkill1ActiveTimer > 0f)
			{
				num17 += 15f;
			}
		}
		double num18 = this.enemyBaseGold * (double)num * (double)num3 * (double)num4 * (double)num5 * num6 * (double)num7 * (double)num8 * (double)num9 * (double)num10 * (double)num11 * (double)num12 * (double)num13 * (double)num14 * (double)num15 * (double)num17 * (double)this.iap3xGoldBonus * (double)this.iap3xComboBonus * (double)num16;
		num18 = Math.Round(num18, 0);
		if (double.IsInfinity(num18) || double.IsNaN(num18))
		{
			num18 = 1E+308;
		}
		return num18;
	}

	public float getChestChance(bool bypassSkills)
	{
		float num = 1f;
		if (GameManager.Instance.commIcon == 3)
		{
			num += 2f;
		}
		else if (GameManager.Instance.commIcon == 18)
		{
			num += 5f;
		}
		for (int i = 0; i < this.activeHeroes.Count; i++)
		{
			Hero hero = this.activeHeroes[i];
			num += hero.getReforgeBoosts(7);
		}
		num += (float)GameManager.Instance.tech18Lvl * 0.5f;
		if (!bypassSkills)
		{
			if (HeroManager.Instance.hero10.isActiveHero)
			{
				num += 3f;
			}
			if (HeroManager.Instance.hero24.isActiveHero)
			{
				num += 5f;
			}
		}
		return num;
	}

	public double getActChestGold(bool isBoss, bool bypassSkills)
	{
		float num = 1f + (float)GameManager.Instance.treeAll4Lvl * 0.1f;
		float num2 = 1f + (float)GameManager.Instance.tournArtLvl5 * 5f;
		float num3 = 1f;
		float num4 = 1f;
		for (int i = 0; i < this.activeHeroes.Count; i++)
		{
			Hero hero = this.activeHeroes[i];
			if (hero.type == 2)
			{
				num3 += (float)hero.ringPower * 0.05f;
			}
			num4 += hero.getReforgeBoosts(6);
		}
		float num5 = 1f + (float)GameManager.Instance.tech17Lvl * 0.1f;
		float num6 = 1f + (float)AcademiaManager.Instance.listAcademia[4].totalBonus * 0.01f;
		float num7 = 1f + (float)GameManager.Instance.artifact2Lvl * 0.02f;
		float num8 = 1f;
		if (!bypassSkills)
		{
			if (HeroManager.Instance.hero9.isActiveHero)
			{
				num8 += 0.1f;
			}
			if (HeroManager.Instance.hero23.isActiveHero)
			{
				num8 += 0.2f;
			}
		}
		double num9 = this.getActGoldDrop(isBoss, bypassSkills) * 10.0 * (double)num2 * (double)num3 * (double)num4 * (double)num * (double)num5 * (double)num6 * (double)num7 * (double)num8;
		num9 = Math.Round(num9, 0);
		if (double.IsInfinity(num9) || double.IsNaN(num9))
		{
			num9 = 1E+308;
		}
		return num9;
	}

	public double getPrestigeGems(int _waveNum)
	{
		double num = 0.0;
		int num2 = 50;
		int num3 = 1;
		bool flag = false;
		for (int i = 1; i < _waveNum; i++)
		{
			num += (double)num3;
			if (i >= num2)
			{
				if (flag)
				{
					num3 += 2;
					flag = false;
				}
				else
				{
					num3++;
					flag = true;
				}
				num2 += 25;
			}
		}
		return this.getActGemsAmount(num);
	}

	public double getActGemsAmount(double totalGems)
	{
		float num = 1f + (float)GameManager.Instance.treeAll6Lvl * 0.05f;
		float num2 = 1f;
		if (GameManager.Instance.commIcon == 10)
		{
			num2 = 2.5f;
		}
		else if (GameManager.Instance.commIcon == 16)
		{
			num2 = 5f;
		}
		else if (GameManager.Instance.commIcon == 22)
		{
			num2 = 10f;
		}
		float num3 = 1f + (float)GameManager.Instance.tournArtLvl6 * 3f;
		float num4 = 1f + (float)GameManager.Instance.tech15Lvl * 0.05f;
		float num5 = 1f + (float)AcademiaManager.Instance.listAcademia[5].totalBonus * 0.01f;
		float num6 = 1f + (float)GameManager.Instance.badge3Lvl * 0.75f;
		float num7 = 1f + (float)GameManager.Instance.artifact3Lvl * 0.02f;
		totalGems = totalGems * (double)num2 * (double)num3 * (double)num * (double)num4 * (double)num5 * (double)num6 * (double)num7 * this.iap3xBlueprintBonusDouble * (double)this.iap3xComboBonus;
		totalGems = Math.Round(totalGems, 0);
		return totalGems;
	}

	public int getPrestigeSkillpointAmt(int _waveNum)
	{
		int num = _waveNum / 15;
		float num2 = 1f;
		float num3 = 1f;
		if (GameManager.Instance.commIcon == 10)
		{
			num3 = 2.5f;
		}
		else if (GameManager.Instance.commIcon == 16)
		{
			num3 = 5f;
		}
		else if (GameManager.Instance.commIcon == 22)
		{
			num3 = 10f;
		}
		num2 += (float)GameManager.Instance.tech29Lvl * 0.02f;
		num2 += (float)GameManager.Instance.badge4Lvl * 0.25f;
		num2 += (float)GameManager.Instance.artifact3Lvl * 0.0025f;
		float num4 = (float)num * num2 * num3;
		return (int)num4;
	}

	public void doPrestige(bool fullReset)
	{
		this.prestigePause = true;
		SoundManager.Instance.playPrestige();
		UIManager.Instance.blackbg.SetActive(false);
		UIManager.Instance.menu.SetActive(false);
		GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(UIManager.Instance.particlesPrestigeStars);
		gameObject.transform.SetParent(UIManager.Instance.particlesParent.transform);
		this.statCurrPrestigeTime = 0;
		this.statPrestiges++;
		this.leadPrestiges++;
		if ((Application.platform == RuntimePlatform.IPhonePlayer || Application.platform == RuntimePlatform.Android) && !this.hasRatedYet && this.statPrestiges % 3 == 0)
		{
			this.showRatePanel = true;
		}
		AchievementManager.Instance.listAch[2].currAmt += 1.0;
		AchievementManager.Instance.checkIfAchComplete(2);
		if (this.m3Num == 2)
		{
			this.m3CurrVal++;
			this.checkMissionStatus();
		}
		if (this.q1Num == 4)
		{
			this.q1CurrVal++;
			this.checkQuestStatus();
		}
		UIManager.Instance.prestigeWhiteBg.SetActive(true);
		UIManager.Instance.prestigeWhiteBg.GetComponent<Image>().canvasRenderer.SetAlpha(0f);
		UIManager.Instance.prestigeWhiteBg.GetComponent<Image>().CrossFadeAlpha(1f, 4f, false);
		if (LoginManager.Instance.isConnectedPlayfab)
		{
			this.lastPlayTime = Convert.ToString(this.currServerTime);
		}
		double prestigeGems = GameManager.Instance.getPrestigeGems(this.enemyWaveNum);
		this.bpAmt += prestigeGems;
		AchievementManager.Instance.listAch[17].currAmt += prestigeGems;
		AchievementManager.Instance.checkIfAchComplete(17);
		int prestigeSkillpointAmt = this.getPrestigeSkillpointAmt(this.enemyWaveNum - 1);
		this.spAmt += prestigeSkillpointAmt;
		AchievementManager.Instance.listAch[19].currAmt += (double)prestigeSkillpointAmt;
		AchievementManager.Instance.checkIfAchComplete(19);
		int num = 10 + GameManager.Instance.tech22Lvl;
		float num2 = (float)num * 0.01f;
		float num3 = (float)(this.enemyWaveNum - 1) * num2;
		int num4 = (int)num3;
		if (fullReset)
		{
			num4 = 1;
		}
		this.alreadyPlayedWave = false;
		this.enemyWaveNum = num4;
		this.nextPrestigeWave = num4 + 49;
		this.enemyBaseDps = 1.0;
		this.enemyBaseGold = 1.0;
		for (int i = 1; i < num4; i++)
		{
			float num5;
			float num6;
			if (i > 3000)
			{
				num5 = 1.155f;
				num6 = 1.1f;
				if (this.enemyWaveNum % 25 == 0)
				{
					num5 = 1.7f;
				}
			}
			else if (i > 2000)
			{
				num5 = 1.155f;
				num6 = 1.105f;
				if (i % 25 == 0)
				{
					num5 = 1.7f;
				}
			}
			else if (i > 1000)
			{
				num5 = 1.14f;
				num6 = 1.11f;
				if (i % 25 == 0)
				{
					num5 = 1.65f;
				}
			}
			else if (i > 500)
			{
				num5 = 1.145f;
				num6 = 1.115f;
				if (i % 25 == 0)
				{
					num5 = 1.675f;
				}
			}
			else if (i > 200)
			{
				num5 = 1.15f;
				num6 = 1.1175f;
				if (i % 25 == 0)
				{
					num5 = 1.7f;
				}
			}
			else if (i > 50)
			{
				num5 = 1.155f;
				num6 = 1.12f;
				if (i % 25 == 0)
				{
					num5 = 1.725f;
				}
			}
			else
			{
				num5 = 1.16f;
				num6 = 1.12f;
				if (i % 50 == 0)
				{
					num5 = 1.75f;
				}
			}
			double num7 = this.enemyBaseDps;
			this.enemyBaseDps *= (double)num5;
			this.enemyBaseDps = Math.Round(this.enemyBaseDps, 0);
			if (num7 == this.enemyBaseDps)
			{
				this.enemyBaseDps += 1.0;
			}
			double num8 = this.enemyBaseGold;
			this.enemyBaseGold *= (double)num6;
			this.enemyBaseGold = Math.Round(this.enemyBaseGold, 0);
			if (num8 == this.enemyBaseGold)
			{
				this.enemyBaseGold += 1.0;
			}
		}
		if (!fullReset)
		{
			this.goldAmt = 25.0 + 25.0 * this.getActGoldDrop(false, true);
		}
		else
		{
			this.goldAmt = 25.0;
		}
		for (int j = 0; j < HeroManager.Instance.heroList.Count; j++)
		{
			HeroManager.Instance.heroList[j].initHero(true);
		}
		HeroManager.Instance.hero1.lastPlayPosition = new Vector3(0f, 0f);
		this.activeHeroes.Clear();
		this.numAliveHeroes = 0;
		this.selectedHero = null;
		int num9;
		if (this.enemyWaveNum % 5 == 0)
		{
			num9 = this.enemyWaveNum;
		}
		else
		{
			num9 = (this.enemyWaveNum / 5 + 1) * 5;
		}
		this.nextWaveClaimedAcademia = num9;
		this.onMapNum++;
		if (this.onMapNum == UIManager.Instance.listMaps.Count)
		{
			this.onMapNum = 0;
		}
		this.isFarmingWave = false;
		DataManager.Instance.saveData(true);
	}

	public double getDmgDealtwTypeMult(double dmg, int attackerType, int targetType)
	{
		if (attackerType == 1)
		{
			if (targetType == 1)
			{
				dmg *= 1.0;
			}
			else if (targetType == 2)
			{
				dmg *= 1.25;
			}
			else
			{
				dmg *= 0.75;
			}
		}
		else if (attackerType == 2)
		{
			if (targetType == 1)
			{
				dmg *= 0.75;
			}
			else if (targetType == 2)
			{
				dmg *= 1.0;
			}
			else
			{
				dmg *= 1.25;
			}
		}
		else if (targetType == 1)
		{
			dmg *= 1.25;
		}
		else if (targetType == 2)
		{
			dmg *= 0.75;
		}
		else
		{
			dmg *= 1.0;
		}
		dmg = Math.Round(dmg, 0);
		return dmg;
	}

	public void setNewDailyMissions()
	{
		this.currMissionDate = DateTime.ParseExact(this.currServerTime.ToString("yyyy/MM/dd"), "yyyy/MM/dd", null).ToString("yyyy/MM/dd");
		int num = 1;
		if (this.statHighestWave > 3000)
		{
			num = 5;
		}
		else if (this.statHighestWave > 2000)
		{
			num = 4;
		}
		else if (this.statHighestWave > 1000)
		{
			num = 3;
		}
		else if (this.statHighestWave > 500)
		{
			num = 2;
		}
		this.m1CurrVal = 0;
		this.m1Claimed = false;
		this.m1Num = UnityEngine.Random.Range(0, 5);
		if (this.m1Num == 0)
		{
			this.m1NeedVal = 500 * (num * 2);
		}
		else if (this.m1Num == 1)
		{
			this.m1NeedVal = 50 * (num * 2);
		}
		else if (this.m1Num == 2)
		{
			this.m1NeedVal = 50 * (num * num);
		}
		else if (this.m1Num == 3)
		{
			this.m1NeedVal = 50 * (num * 2);
		}
		else if (this.m1Num == 4)
		{
			this.m1NeedVal = 300 * (num * 2);
		}
		this.m2CurrVal = 0;
		this.m2Claimed = false;
		this.m2Num = UnityEngine.Random.Range(0, 6);
		if (this.m2Num == 0)
		{
			this.m2NeedVal = 25 * (num * num * num);
		}
		else if (this.m2Num == 1)
		{
			this.m2NeedVal = 100 * (num * num * num);
		}
		else if (this.m2Num == 2)
		{
			this.m2NeedVal = 25 * (num * num);
		}
		else if (this.m2Num == 3)
		{
			this.m2NeedVal = 25 * (num * num);
		}
		else if (this.m2Num == 4)
		{
			this.m2NeedVal = 300 * (num * 2);
		}
		else if (this.m2Num == 5)
		{
			this.m2NeedVal = 10;
		}
		this.m3CurrVal = 0;
		this.m3Claimed = false;
		this.m3Num = UnityEngine.Random.Range(1, 6);
		if (this.m3Num != 0)
		{
			if (this.m3Num == 1)
			{
				this.m3NeedVal = 125 * (num * num);
			}
			else if (this.m3Num == 2)
			{
				this.m3NeedVal = 3;
			}
			else if (this.m3Num == 3)
			{
				this.m3NeedVal = 150 * num;
			}
			else if (this.m3Num == 4)
			{
				this.m3NeedVal = 300 * (num * 2);
			}
			else if (this.m3Num == 5)
			{
				this.m3NeedVal = num;
			}
		}
		this.m4CurrVal = 0;
		this.m4Claimed = false;
		this.m4Num = UnityEngine.Random.Range(1, 6);
		if (this.m4Num == 1)
		{
			this.m4NeedVal = 225 + num * 25;
		}
		else if (this.m4Num == 2)
		{
			this.m4NeedVal = 3 + num;
		}
		else if (this.m4Num == 3)
		{
			this.m4NeedVal = 2 + num;
		}
		else if (this.m4Num == 4)
		{
			this.m4NeedVal = 50 * num;
		}
		else if (this.m4Num == 5)
		{
			this.m4NeedVal = 250 * num;
		}
		this.m5CurrVal = 0;
		this.m5Claimed = false;
		this.m5Num = UnityEngine.Random.Range(1, 6);
		if (this.m5Num == 1)
		{
			int num2 = this.statHighestWave + 1;
			if (num2 < 50)
			{
				num2 = 50;
			}
			if (num2 > 4500)
			{
				num2 = 4500;
			}
			this.m5NeedVal = num2;
		}
		else if (this.m5Num == 2)
		{
			this.m5NeedVal = 3;
		}
		else if (this.m5Num == 3)
		{
			this.m5NeedVal = 10800;
		}
		else if (this.m5Num == 4)
		{
			this.m5NeedVal = 250 * num;
		}
		else if (this.m5Num == 5)
		{
			this.m5NeedVal = 5;
		}
	}

	public void checkMissionStatus()
	{
		bool flag = false;
		if (!this.m1Claimed && this.m1CurrVal >= this.m1NeedVal)
		{
			flag = true;
		}
		if (!this.m2Claimed && this.m2CurrVal >= this.m2NeedVal)
		{
			flag = true;
		}
		if (!this.m3Claimed && this.m3CurrVal >= this.m3NeedVal)
		{
			flag = true;
		}
		if (!this.m4Claimed && this.m4CurrVal >= this.m4NeedVal)
		{
			flag = true;
		}
		if (!this.m5Claimed && this.m5CurrVal >= this.m5NeedVal)
		{
			flag = true;
		}
		if (flag && LoginManager.Instance.isConnectedPlayfab)
		{
			UIManager.Instance.notifIconMissions.SetActive(true);
		}
		else
		{
			UIManager.Instance.notifIconMissions.SetActive(false);
		}
	}

	public void getNewQuest1()
	{
		this.q1Num = UnityEngine.Random.Range(1, 5);
		this.q1CurrVal = 0;
		this.q1Reward = UnityEngine.Random.Range(1, 4);
		if (this.q1Num == 1)
		{
			this.q1NeedVal = 1500;
		}
		else if (this.q1Num == 2)
		{
			this.q1NeedVal = 5000;
		}
		else if (this.q1Num == 3)
		{
			this.q1NeedVal = 2;
		}
		else if (this.q1Num == 4)
		{
			this.q1NeedVal = 5;
		}
		if (this.iap3xEmeralds)
		{
			this.q1Reward *= 3;
		}
	}

	public void getNewQuest2()
	{
		this.q2Num = UnityEngine.Random.Range(1, 5);
		this.q2CurrVal = 0;
		this.q2Reward = UnityEngine.Random.Range(1, 4);
		if (this.q2Num == 1)
		{
			this.q2NeedVal = 8;
		}
		else if (this.q2Num == 2)
		{
			this.q2NeedVal = 3;
		}
		else if (this.q2Num == 3)
		{
			this.q2NeedVal = 360 + 2 * this.badge11Lvl + 10 * this.badge19Lvl;
		}
		else if (this.q2Num == 4)
		{
			this.q2NeedVal = 8;
		}
		if (this.iap3xEmeralds)
		{
			this.q2Reward *= 3;
		}
	}

	public void getNewQuest3()
	{
		this.q3Num = UnityEngine.Random.Range(1, HeroManager.Instance.heroList.Count + 1);
		this.q3CurrVal = 0;
		this.q3Reward = UnityEngine.Random.Range(1, 4);
		this.q3NeedVal = 5000;
		if (this.iap3xEmeralds)
		{
			this.q3Reward *= 3;
		}
	}

	public void getNewQuest4()
	{
		this.q4Num = UnityEngine.Random.Range(1, 5);
		this.q4CurrVal = 0;
		this.q4Reward = UnityEngine.Random.Range(1, 4);
		if (this.q4Num == 1)
		{
			this.q4NeedVal = 10000;
		}
		else if (this.q4Num == 2)
		{
			this.q4NeedVal = 7500;
		}
		else if (this.q4Num == 3)
		{
			this.q4NeedVal = 1000;
		}
		else if (this.q4Num == 4)
		{
			this.q4NeedVal = 25000;
		}
		if (this.iap3xEmeralds)
		{
			this.q4Reward *= 3;
		}
	}

	public void getNewQuest5()
	{
		this.q5Num = UnityEngine.Random.Range(1, 5);
		this.q5CurrVal = 0;
		this.q5Reward = UnityEngine.Random.Range(1, 4);
		if (this.q5Num == 1)
		{
			this.q5NeedVal = 50000;
		}
		else if (this.q5Num == 2)
		{
			this.q5NeedVal = 1000;
		}
		else if (this.q5Num == 3)
		{
			this.q5NeedVal = 2000;
		}
		else if (this.q5Num == 4)
		{
			this.q5NeedVal = 500000;
		}
		if (this.iap3xEmeralds)
		{
			this.q5Reward *= 3;
		}
	}

	public void getNewQuest6()
	{
		this.q6Num = UnityEngine.Random.Range(2, 6);
		this.q6CurrVal = 0;
		this.q6Reward = UnityEngine.Random.Range(1, 4);
		if (this.q6Num != 1)
		{
			if (this.q6Num == 2)
			{
				this.q6NeedVal = 100;
			}
			else if (this.q6Num == 3)
			{
				this.q6NeedVal = 250;
			}
			else if (this.q6Num == 4)
			{
				this.q6NeedVal = 5;
			}
			else if (this.q6Num == 5)
			{
				this.q6NeedVal = 2000;
			}
		}
		if (this.iap3xEmeralds)
		{
			this.q6Reward *= 3;
		}
	}

	public void checkQuestStatus()
	{
		bool flag = false;
		if (this.q1CurrVal >= this.q1NeedVal && this.q1Num > 0)
		{
			flag = true;
		}
		if (this.q2CurrVal >= this.q2NeedVal && this.q2Num > 0)
		{
			flag = true;
		}
		if (this.q3CurrVal >= this.q3NeedVal && this.q3Num > 0)
		{
			flag = true;
		}
		if (this.q4CurrVal >= this.q4NeedVal && this.q4Num > 0)
		{
			flag = true;
		}
		if (this.q5CurrVal >= this.q5NeedVal && this.q5Num > 0)
		{
			flag = true;
		}
		if (this.q6CurrVal >= this.q6NeedVal && this.q6Num > 0)
		{
			flag = true;
		}
		if (flag)
		{
			UIManager.Instance.notifIconQuests.SetActive(true);
		}
		else
		{
			UIManager.Instance.notifIconQuests.SetActive(false);
		}
	}

	public void addNewCommExp(int amt)
	{
		this.commCurrExp += amt;
		if (GameManager.Instance.m3Num == 1)
		{
			GameManager.Instance.m3CurrVal += amt;
			GameManager.Instance.checkMissionStatus();
		}
		while (this.commCurrExp >= this.commNextExp)
		{
			this.commLevel++;
			this.commLastExp = this.commNextExp;
			this.commNextExp += (this.commLevel + 1) * 15;
			this.commBonus += this.commLevel;
			AchievementManager.Instance.listAch[1].currAmt += 1.0;
			AchievementManager.Instance.checkIfAchComplete(1);
			if (GameManager.Instance.q1Num == 3)
			{
				GameManager.Instance.q1CurrVal++;
				GameManager.Instance.checkQuestStatus();
			}
			if (this.commLevel == 3 || this.commLevel == 5 || this.commLevel == 10 || this.commLevel == 15 || this.commLevel == 20 || this.commLevel == 25 || this.commLevel == 35 || this.commLevel == 50 || this.commLevel == 75 || this.commLevel == 100 || this.commLevel == 125 || this.commLevel == 150 || this.commLevel == 175 || this.commLevel == 200 || this.commLevel == 250 || this.commLevel == 300 || this.commLevel == 350 || this.commLevel == 400 || this.commLevel == 450 || this.commLevel == 500)
			{
				UIManager.Instance.commNotifIcon.SetActive(true);
			}
		}
	}

	public void checkServerStuff()
	{
		if (UIManager.Instance.saveIsLoaded)
		{
			if (this.statHighestWave > 4500 || this.enemyWaveNum > 4500 || this.highestGemAmt >= 350000 || this.leadMoneySpent > 1600 || (this.enemyWaveNum == 4500 && this.statCurrPrestigeTime < 1800) || (this.enemyWaveNum == 4500 && this.statTimePlayed < 450000))
			{
				this.isBanned = true;
			}
		}
		else
		{
			UnityEngine.Debug.Log("scene not loaded yet - no AB check");
		}
		if (this.isBanned)
		{
			LoginManager.Instance.isConnectedPlayfab = false;
			return;
		}
		if (LoginManager.Instance.isConnectedPlayfab)
		{
			PlayFabClientAPI.GetTime(new GetTimeRequest(), delegate(GetTimeResult result)
			{
				LoginManager.Instance.isConnectedPlayfab = true;
				this.currServerTime = result.Time;
				UnityEngine.Debug.Log("successfulled check server stuff... server time: " + this.currServerTime);
				if (this.lastPlayTime == string.Empty)
				{
					this.lastPlayTime = Convert.ToString(this.currServerTime);
				}
				if (this.lastDailyDate == string.Empty)
				{
					this.lastDailyDate = this.currServerTime.ToString("yyyy/MM/dd");
				}
				if (UIManager.Instance != null)
				{
					UIManager.Instance.checkDailyBonus();
				}
				if (UIManager.Instance != null)
				{
					UIManager.Instance.checkOfflineGold();
				}
				DateTime t = DateTime.ParseExact(this.currServerTime.ToString("yyyy/MM/dd"), "yyyy/MM/dd", null);
				DateTime t2 = DateTime.ParseExact(this.currMissionDate, "yyyy/MM/dd", null);
				if (t > t2)
				{
					GameManager.Instance.setNewDailyMissions();
				}
				else if (t < t2)
				{
					this.currMissionDate = t.ToString("yyyy/MM/dd");
				}
				if (this.lastUndergroundTime == string.Empty)
				{
					this.lastUndergroundTime = Convert.ToString(this.currServerTime.AddHours(-5.0));
				}
				TheUnderground.Instance.checkIfCanPlay();
				if (this.tournamentLastDate == string.Empty)
				{
					this.tournamentLastDate = this.currServerTime.AddDays(-5.0).ToString("yyyy/MM/dd");
					this.tournamentClaimedReward = true;
				}
				TournamentManager.Instance.updateButtonText();
				if (this.lastPirateRaidTime == string.Empty)
				{
					this.lastPirateRaidTime = Convert.ToString(this.currServerTime.AddHours(-5.0));
				}
				PirateRaid.Instance.checkIfCanPlay();
				this.titleContentCheck++;
				if (this.titleContentCheck >= 10)
				{
					this.titleContentCheck = 0;
					this.checkTitleContent();
				}
				this.updateLeaderboardsData();
			}, delegate(PlayFabError error)
			{
				UnityEngine.Debug.Log("failed to check server stuff...");
				LoginManager.Instance.isConnectedPlayfab = false;
				LoginManager.Instance.isLoggedInCloud = false;
				LoginManager.Instance.tryLogInPlayFab();
			}, null, null);
		}
		else
		{
			LoginManager.Instance.tryLogInPlayFab();
		}
	}

	public void checkTitleContent()
	{
		PlayFabClientAPI.GetTitleData(new GetTitleDataRequest(), delegate(GetTitleDataResult result)
		{
			UnityEngine.Debug.Log("got title content");
			int num = 0;
			int num2 = 0;
			foreach (KeyValuePair<string, string> keyValuePair in result.Data)
			{
				if (keyValuePair.Key == "VersionNumber")
				{
					num = int.Parse(keyValuePair.Value);
				}
				else if (keyValuePair.Key == "VersionNumberTest")
				{
					num2 = int.Parse(keyValuePair.Value);
				}
			}
			if (Application.platform == RuntimePlatform.WebGLPlayer && num != 7 && num2 != 7)
			{
				UIManager.Instance.updateGameText.SetActive(true);
			}
		}, delegate(PlayFabError error)
		{
			UnityEngine.Debug.Log("error getting title content");
		}, null, null);
	}

	public void clickedFarmButton()
	{
		if (this.isFarmingWave)
		{
			this.isFarmingWave = false;
		}
		else
		{
			this.isFarmingWave = true;
		}
	}

	private void Update()
	{
		this.goldAmt = Math.Round(this.goldAmt, 0);
		if (double.IsInfinity(this.goldAmt) || double.IsNaN(this.goldAmt))
		{
			this.goldAmt = 1E+308;
		}
		else if (this.goldAmt < 0.0)
		{
			this.goldAmt = 0.0;
		}
		if (this.gemsAmt > this.highestGemAmt)
		{
			this.highestGemAmt = this.gemsAmt;
		}
		if (this.prestigePause)
		{
			this.prestigeTimer += Time.deltaTime;
			if (this.prestigeTimer >= 5f)
			{
				this.prestigeTimer = 0f;
				SceneManager.LoadScene(SceneManager.GetActiveScene().name);
			}
		}
		if (this.isScalingDeathIcon)
		{
			this.scaleDeathAmt += Time.deltaTime / 10f;
			if (this.scaleDeathAmt >= 1.5f)
			{
				this.isScalingDeathIcon = false;
				if (TheUnderground.Instance.playingMiniGame)
				{
					TheUnderground.Instance.endGame();
				}
				else if (PirateRaid.Instance.playingMiniGame)
				{
					PirateRaid.Instance.endGame();
				}
				else
				{
					this.restartWave();
				}
			}
			else
			{
				UIManager.Instance.deathImage.transform.localScale = new Vector3(this.scaleDeathAmt, this.scaleDeathAmt, this.scaleDeathAmt);
			}
		}
		this.timePlayedTimer += Time.deltaTime;
		if (this.timePlayedTimer >= 1f)
		{
			this.timePlayedTimer = 0f;
			this.statTimePlayed++;
			if (this.m5Num == 3)
			{
				this.m5CurrVal++;
				this.checkMissionStatus();
			}
			this.statCurrPrestigeTime++;
			if (this.iap2xGameSpeedTimer > 0 && this.iap2xGameSpeedTemp && !this.iap2xGameSpeed && this.settings2xGameSpeed)
			{
				this.iap2xGameSpeedTimer--;
				if (this.iap2xGameSpeedTimer <= 0)
				{
					this.iap2xGameSpeedTimer = 0;
					this.iap2xGameSpeedTemp = false;
					this.settings2xGameSpeed = false;
				}
			}
			AchievementManager.Instance.listAch[0].currAmt += 1.0;
			AchievementManager.Instance.checkIfAchComplete(0);
		}
		this.checkTimeTimer += Time.deltaTime;
		if (this.checkTimeTimer >= 30f)
		{
			this.checkTimeTimer = 0f;
			DataManager.Instance.saveData(false);
			for (int i = 0; i < AchievementManager.Instance.listAch.Count; i++)
			{
				AchievementManager.Instance.checkIfAchComplete(i);
			}
			this.checkMissionStatus();
			this.checkQuestStatus();
			this.checkServerStuff();
		}
		this.sortLayerCheck += Time.deltaTime;
		if (this.sortLayerCheck >= 0.25f)
		{
			this.sortLayerCheck = 0f;
			int num = 1;
			List<GameObject> list = new List<GameObject>();
			for (int j = 0; j < this.activeHeroes.Count; j++)
			{
				GameObject gameObject = this.activeHeroes[j].gameObject;
				list.Add(gameObject);
			}
			for (int k = 0; k < EnemyManager.Instance.enemyList.Count; k++)
			{
				GameObject gameObject2 = EnemyManager.Instance.enemyList[k].gameObject;
				list.Add(gameObject2);
			}
			list.Sort((GameObject b, GameObject a) => a.transform.position.y.CompareTo(b.transform.position.y));
			for (int l = 0; l < list.Count; l++)
			{
				if (list[l].GetComponent<Hero>() != null)
				{
					list[l].GetComponent<Hero>().updSortLayer(num);
				}
				else
				{
					list[l].GetComponent<Enemy>().updSortLayer(num);
				}
				num++;
			}
		}
	}

	public static GameManager Instance;

	private const int versionNumber = 7;

	public bool doneTutorial;

	public bool showedPrestigeTut;

	public double goldAmt;

	public double bpAmt;

	public int scrapsAmt;

	public int spAmt;

	public int medAmt;

	public int gemsAmt;

	public bool prestigePause;

	public int nextPrestigeWave;

	private float prestigeTimer;

	public int commIcon;

	public string commName;

	public int commLevel;

	public int commLastExp;

	public int commCurrExp;

	public int commNextExp;

	public int commBonus;

	public int enemyWaveNum;

	public double enemyBaseDps;

	public double enemyBaseGold;

	public bool alreadyPlayedWave;

	public List<Hero> activeHeroes;

	public int numAliveHeroes;

	public Hero selectedHero;

	public int treeAll1Lvl;

	public int treeAll2Lvl;

	public int treeAll3Lvl;

	public int treeAll4Lvl;

	public int treeAll5Lvl;

	public int treeAll6Lvl;

	public int treeAll7Lvl;

	public int treeMelee1Lvl;

	public int treeMelee2Lvl;

	public int treeMelee3Lvl;

	public int treeMelee4Lvl;

	public int treeMelee5Lvl;

	public int treeRange1Lvl;

	public int treeRange2Lvl;

	public int treeRange3Lvl;

	public int treeRange4Lvl;

	public int treeRange5Lvl;

	public int treeMage1Lvl;

	public int treeMage2Lvl;

	public int treeMage3Lvl;

	public int treeMage4Lvl;

	public int treeMage5Lvl;

	public int tech1Lvl;

	public int tech2Lvl;

	public int tech3Lvl;

	public int tech4Lvl;

	public int tech5Lvl;

	public int tech6Lvl;

	public int tech7Lvl;

	public int tech8Lvl;

	public int tech9Lvl;

	public int tech10Lvl;

	public int tech11Lvl;

	public int tech12Lvl;

	public int tech13Lvl;

	public int tech14Lvl;

	public int tech15Lvl;

	public int tech16Lvl;

	public int tech17Lvl;

	public int tech18Lvl;

	public int tech19Lvl;

	public int tech20Lvl;

	public int tech21Lvl;

	public int tech22Lvl;

	public int tech23Lvl;

	public int tech24Lvl;

	public int tech25Lvl;

	public int tech26Lvl;

	public int tech27Lvl;

	public int tech28Lvl;

	public int tech29Lvl;

	public int tech30Lvl;

	public double tech1PaidFor;

	public double tech2PaidFor;

	public double tech3PaidFor;

	public double tech4PaidFor;

	public double tech5PaidFor;

	public double tech6PaidFor;

	public double tech7PaidFor;

	public double tech8PaidFor;

	public double tech9PaidFor;

	public double tech10PaidFor;

	public double tech11PaidFor;

	public double tech12PaidFor;

	public double tech13PaidFor;

	public double tech14PaidFor;

	public double tech15PaidFor;

	public double tech16PaidFor;

	public double tech17PaidFor;

	public double tech18PaidFor;

	public double tech19PaidFor;

	public double tech20PaidFor;

	public double tech21PaidFor;

	public double tech22PaidFor;

	public double tech23PaidFor;

	public double tech24PaidFor;

	public double tech25PaidFor;

	public double tech26PaidFor;

	public double tech27PaidFor;

	public double tech28PaidFor;

	public double tech29PaidFor;

	public double tech30PaidFor;

	public double tech31PaidFor;

	public int badge1Lvl;

	public int badge2Lvl;

	public int badge3Lvl;

	public int badge4Lvl;

	public int badge5Lvl;

	public int badge6Lvl;

	public int badge7Lvl;

	public int badge8Lvl;

	public int badge9Lvl;

	public int badge10Lvl;

	public int badge11Lvl;

	public int badge12Lvl;

	public int badge13Lvl;

	public int badge14Lvl;

	public int badge15Lvl;

	public int badge16Lvl;

	public int badge17Lvl;

	public int badge18Lvl;

	public int badge19Lvl;

	public int badge20Lvl;

	public int badge21Lvl;

	public int badge22Lvl;

	public int badge23Lvl;

	public int badge1PaidFor;

	public int badge2PaidFor;

	public int badge3PaidFor;

	public int badge4PaidFor;

	public int badge5PaidFor;

	public int badge6PaidFor;

	public int badge7PaidFor;

	public int badge8PaidFor;

	public int badge9PaidFor;

	public int badge10PaidFor;

	public int badge11PaidFor;

	public int badge12PaidFor;

	public int badge13PaidFor;

	public int badge14PaidFor;

	public int badge15PaidFor;

	public int badge16PaidFor;

	public int badge17PaidFor;

	public int badge18PaidFor;

	public int badge19PaidFor;

	public int badge20PaidFor;

	public int badge21PaidFor;

	public int badge22PaidFor;

	public int badge23PaidFor;

	public bool iapSkipAds;

	public bool iap2xGameSpeed;

	public bool iap2xGameSpeedTemp;

	public int iap2xGameSpeedTimer;

	public int iap3xDpsHpBonus;

	public int iap3xGoldBonus;

	public int iap3xBlueprintBonus;

	public int iap3xBlueprintBonus2;

	public double iap3xBlueprintBonusDouble;

	public int iap3xComboBonus;

	public bool iapTournBoost;

	public bool iapCommClass1;

	public bool iapCommClass2;

	public bool iapCommClass3;

	public bool iap3xEmeralds;

	public int iap2xAdBoost;

	public bool iap2xAdRewards;

	public int iapCelestEquipChance;

	public bool iapRareSkins;

	public bool iapEpicSkins;

	public int nextWaveClaimedAcademia;

	public int highestAcademiaWave;

	public string currMissionDate;

	public int m1Num;

	public int m1CurrVal;

	public int m1NeedVal;

	public bool m1Claimed;

	public int m2Num;

	public int m2CurrVal;

	public int m2NeedVal;

	public bool m2Claimed;

	public int m3Num;

	public int m3CurrVal;

	public int m3NeedVal;

	public bool m3Claimed;

	public int m4Num;

	public int m4CurrVal;

	public int m4NeedVal;

	public bool m4Claimed;

	public int m5Num;

	public int m5CurrVal;

	public int m5NeedVal;

	public bool m5Claimed;

	public int q1Num;

	public int q1CurrVal;

	public int q1NeedVal;

	public int q1Reward;

	public int q2Num;

	public int q2CurrVal;

	public int q2NeedVal;

	public int q2Reward;

	public int q3Num;

	public int q3CurrVal;

	public int q3NeedVal;

	public int q3Reward;

	public int q4Num;

	public int q4CurrVal;

	public int q4NeedVal;

	public int q4Reward;

	public int q5Num;

	public int q5CurrVal;

	public int q5NeedVal;

	public int q5Reward;

	public int q6Num;

	public int q6CurrVal;

	public int q6NeedVal;

	public int q6Reward;

	public string lastUndergroundTime;

	public int auraDmgLvl;

	public int auraHpLvl;

	public int auraGoldLvl;

	public bool tournamentActive;

	public bool tournamentClaimedReward;

	public int tournamentBracket;

	public int tournamentScore;

	public string tournamentLastDate;

	public string tournamentOnDate;

	public int tournamentOnType;

	public int tournArtLvl1;

	public int tournArtLvl2;

	public int tournArtLvl3;

	public int tournArtLvl4;

	public int tournArtLvl5;

	public int tournArtLvl6;

	public int tournArtLvl7;

	public int tournArtLvl8;

	public int tournArtLvl9;

	public int tournArtCollections;

	public double tournArtCollectionsBonus;

	public string lastPirateRaidTime;

	public int artifact1Lvl;

	public int artifact2Lvl;

	public int artifact3Lvl;

	public int statHighestWave;

	public int statTotalScore;

	public int statEnemiesKilled;

	public int statTotalWaves;

	public int statPrestiges;

	public int statCurrPrestigeTime;

	public int statAdsWatched;

	public int statMoneySpent;

	public int statTimePlayed;

	public int leadHighestWave;

	public int leadTotalScore;

	public int leadEnemiesKilled;

	public int leadTotalWaves;

	public int leadPrestiges;

	public int leadMoneySpent;

	public bool isFarmingWave;

	public bool settingsParticleEffects;

	public bool settingsCombatTexts;

	public bool settingsHpManaBars;

	public bool settingsBgMusic;

	public bool settingsSoundFx;

	public bool settingsRandomMusic;

	public int settingsOnSongNum;

	public string lastRewardCodeDate;

	public string lastGiveExtraCodeDate;

	public bool settings2xGameSpeed;

	public bool settingScientificNotation;

	public bool settingsRareSkins;

	public bool settingsEpicSkins;

	public DateTime currServerTime;

	public string lastPlayTime;

	public int consecDaysPlayed;

	public string lastDailyDate;

	public int videoAdBoost;

	public int videoAdOnNum;

	private bool isScalingDeathIcon;

	private float scaleDeathAmt;

	public bool isGameOver;

	public int onMapNum;

	private float timePlayedTimer;

	public bool showRatePanel;

	public bool hasRatedYet;

	private bool isLoaded;

	private float checkTimeTimer;

	private float leaderboardsTimer;

	public bool hasClaimedWelcomeGift;

	private int titleContentCheck = 10;

	private float sortLayerCheck;

	public bool sceneIsLoaded;

	public bool showDiscordPanel;

	public int hasV2;

	public bool hasV3;

	public bool hasV4;

	public bool hasV115;

	public int amtBoughtFromIAPs;

	public bool isBanned;

	public int highestGemAmt;
}
